class Solution {
    int binom_mod2(int n, int k) {
        return ((n & k) == k) ? 1 : 0;
    }
    int smallBinomMod5(int n, int k) {
        int smallFact[5] = {1, 1, 2, 1, 4};
        if (k > n) return 0;
        int inv[5] = {0, 1, 3, 2, 4};
        int num = smallFact[n];
        int denom = (smallFact[k] * smallFact[n - k]) % 5;
        int invDenom = inv[denom];
        return (num * invDenom) % 5;
    }
    int binom_mod5(int n, int k) {
        if (k > n) return 0;
        int res = 1;
        while(n > 0 || k > 0) {
            int n0 = n % 5, k0 = k % 5;
            int cur = smallBinomMod5(n0, k0);
            res = (res * cur) % 5;
            n /= 5;
            k /= 5;
        }
        return res;
    }
    int combineMod2Mod5(int mod2, int mod5) {
        int cand = mod5;
        if (cand % 2 != mod2) cand += 5;
        return cand % 10;
    }
public:
    typedef unsigned long long ull;
    bool hasSameDigits(string s) {
        int m = s.size();
        vector<int> digits(m);
        for (int i = 0; i < m; i++) {
            digits[i] = s[i] - '0';
        }
        int R = m - 2;
        int a = 0, b = 0;
        for (int j = 0; j <= R; j++) {
            int mod2 = binom_mod2(R, j);
            int mod5 = binom_mod5(R, j);
            int binom_mod10 = combineMod2Mod5(mod2, mod5);
            a = (a + binom_mod10 * digits[j]) % 10;
            b = (b + binom_mod10 * digits[j + 1]) % 10;
        }
        return a == b;
    }
};
