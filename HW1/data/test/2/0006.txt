class Solution {
public:
    int maxFreeTime(int eventTime, vector<int>& start, vector<int>& end) {
        int n = start.size();
        int ans = 0;
        map<int,int>mp;
        int prev = 0;
        vector<pair<int,int>>vec(n);
        vector<int>events(n);
        for(int i=0;i<n;i++){
            vec[i] = {start[i], end[i]};
            events[i] = end[i] - start[i];
        }
        for(int i=0;i<n;i++){
            mp[vec[i].first-prev]++;
            prev = vec[i].second;
        }
        mp[eventTime-end[n-1]]++;
        int prevEnd = 0, nextStart = eventTime;
        for(int i=0;i<n;i++){
            if(i-1>=0){
                prevEnd = vec[i-1].second;
            }
            if(i+1<n){
                nextStart = vec[i+1].first;
            }
            else{
                nextStart = eventTime;
            }
            int gap1 = vec[i].first - prevEnd;
            int gap2 = nextStart - vec[i].second;
            mp[gap1]--;
            mp[gap2]--;
            if(mp[gap1]<=0) mp.erase(gap1);
            if(mp[gap2]<=0) mp.erase(gap2);
            
            int maxi = mp.rbegin()->first;
            if(maxi >= events[i]){
                ans = max(ans, nextStart - prevEnd);
            }
            else{
                ans = max(ans, nextStart - prevEnd - events[i]);
            }
            mp[gap1]++;
            mp[gap2]++;
        }
        return ans;
        
    }
};