class Solution {
public:

    int pivot(vector<int>&vec){
        int n = vec.size();
        int left = 0, right = n-1;

        while(left<right){
            int mid = left + (right - left)/2;
            
            if(vec[mid]<vec[0]){
                right = mid;
            }
            else{
                left = mid + 1;
            }
        }
        return right;
    }

    int binarySearch(vector<int>&vec, int left, int right, int target){
        while(left<=right){
            int mid = left +(right - left)/2;
            if(vec[mid]<target){
                left = mid + 1;
            }
            else if(vec[mid]>target){
                right = mid - 1;
            }
            else{
                return mid;
            }
        }
        return -1;
    }


    int search(vector<int>& nums, int target) {
        int n = nums.size();
        int piv = pivot(nums);
        int ans = 0;

        if(nums[n-1]>nums[0]){
            ans = binarySearch(nums, 0, n-1, target);
        }
        else if(target<=nums[n-1]){
            ans = binarySearch(nums, piv, n-1, target);
        }
        else{
            ans = binarySearch(nums, 0, piv-1, target);
        }
        cout<<piv<<endl;
        return ans;
    }
};