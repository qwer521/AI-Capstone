class Solution {
public:
    vector<int> g[100005];
    int take[100005]{0};
    int bob_dfs(int a,int p,int cnt){
        int t=0;
        for(auto i:g[a]){
            if(i!=p) t=max(t,bob_dfs(i,a,cnt+1));
        }
        if(t || a==0){
            take[a]=cnt;
            return 1;
        }
        return 0;
    }
    int alice_dfs(int a,int p,int cnt,vector<int>& amount){
        int sum=0;
        if(take[a]==cnt)sum+=amount[a]/2;
        else if(take[a]>cnt || take[a]==0)sum+=amount[a];
        // cout<<a<<" "<<sum<<"\n";
        if(g[a].size()==1&&a!=0)return sum;
        int m=-INT_MAX;
        for(auto i:g[a]){
            if(i!=p)
                m=max(alice_dfs(i,a,cnt+1,amount),m);
        }
        return sum+m;
    }
    int mostProfitablePath(vector<vector<int>>& edges, int bob, vector<int>& amount) {
        for(int i=0;i<edges.size();i++){
            g[edges[i][0]].push_back(edges[i][1]);
            g[edges[i][1]].push_back(edges[i][0]);
        }
        bob_dfs(bob,bob,1);
        return alice_dfs(0,0,1,amount);
    }
};