class Solution {
public:
    vector<vector<int>> tree;
    vector<int> bobTime;
    int n;
    
    bool findBobPath(int node, int parent, int time, int bob, vector<int>& path) {
        path.push_back(node);
        if (node == bob) {
            for (int i = 0; i < path.size(); i++) {
                bobTime[path[i]] = i;
            }
            return true;
        }
        for (int neighbor : tree[node]) {
            if (neighbor != parent) {
                if (findBobPath(neighbor, node, time + 1, bob, path)) return true;
            }
        }
        path.pop_back();
        return false;
    }
    
    int dfs(int node, int parent, int time, vector<int>& amount) {
        int profit = 0;
        if (bobTime[node] == -1 || time < bobTime[node]) {
            profit = amount[node];
        } else if (time == bobTime[node]) {
            profit = amount[node] / 2;
        }
        int maxSubtreeProfit = INT_MIN;
        for (int neighbor : tree[node]) {
            if (neighbor != parent) {
                maxSubtreeProfit = max(maxSubtreeProfit, dfs(neighbor, node, time + 1, amount));
            }
        }
        return profit + (maxSubtreeProfit == INT_MIN ? 0 : maxSubtreeProfit);
    }
    
    int mostProfitablePath(vector<vector<int>>& edges, int bob, vector<int>& amount) {
        n = amount.size();
        tree.resize(n);
        bobTime.assign(n, -1);
        
        for (auto& edge : edges) {
            tree[edge[0]].push_back(edge[1]);
            tree[edge[1]].push_back(edge[0]);
        }
        
        vector<int> path;
        findBobPath(0, -1, 0, bob, path);
        
        return dfs(0, -1, 0, amount);
    }
};
